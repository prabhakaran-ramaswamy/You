import java.util.ArrayList;

public class ArrayListMethodsExample {
    public static void main(String[] args) {
        // Create an ArrayList
        ArrayList<String> colors = new ArrayList<>();

        // Adding elements to the ArrayList
        colors.add("Red");
        colors.add("Blue");
        colors.add("Green");

        // Displaying the ArrayList
        System.out.println("ArrayList: " + colors);

        // Checking if the ArrayList is empty
        boolean isEmpty = colors.isEmpty();
        System.out.println("Is the ArrayList empty? " + isEmpty);

        // Getting the size of the ArrayList
        int size = colors.size();
        System.out.println("Size of the ArrayList: " + size);

        // Getting an element from the ArrayList
        String color = colors.get(1);
        System.out.println("Element at index 1: " + color);

        // Setting an element in the ArrayList
        colors.set(2, "Yellow");
        System.out.println("Updated ArrayList: " + colors);

        // Removing an element from the ArrayList
        colors.remove(0);
        System.out.println("ArrayList after removing element at index 0: " + colors);

        // Removing a specific element from the ArrayList
        boolean removed = colors.remove("Blue");
        System.out.println("ArrayList after removing Blue: " + colors);

        // Checking if an element exists in the ArrayList
        boolean contains = colors.contains("Red");
        System.out.println("Does the ArrayList contain Red? " + contains);

        // Getting the index of an element in the ArrayList
        int index = colors.indexOf("Yellow");
        System.out.println("Index of Yellow: " + index);

        // Clearing the ArrayList
        colors.clear();
        System.out.println("ArrayList after clearing: " + colors);
    }
}


Explanation:

We import the ArrayList class from the java.util package.
Inside the main method, we create an empty ArrayList called colors to store strings.
We add elements to the ArrayList using the add method.
We display the ArrayList using the toString method or by directly concatenating it with a string.
We check if the ArrayList is empty using the isEmpty method.
We get the size of the ArrayList using the size method.
We retrieve an element from the ArrayList using the get method, passing the index of the element.
We set an element in the ArrayList using the set method, providing the index and the new value.
We remove an element from the ArrayList using the remove method, passing the index of the element to be removed.
We remove a specific element from the ArrayList using the remove method, passing the element itself.
We check if an element exists in the ArrayList using the contains method.
We get the index of an element in the ArrayList using the indexOf method.
We clear the ArrayList using the clear method, removing all elements from it.
The output of this program would be:

ArrayList: [Red, Blue, Green]
Is the ArrayList empty? false
Size of the ArrayList: 3
Element at index 1: Blue
Updated ArrayList: [Red, Blue, Yellow]
ArrayList after removing element at index 0: [Blue, Yellow]
ArrayList after removing Blue: [Yellow]
Does the ArrayList contain Red? false
Index of Yellow: 0
ArrayList after clearing: []


This example showcases various ArrayList methods such as add, isEmpty, size, get, set, remove, contains, indexOf, and clear. These methods allow you to manipulate and retrieve elements from the ArrayList based on your requirements.




