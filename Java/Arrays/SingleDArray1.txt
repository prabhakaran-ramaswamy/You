public class SingleDArrayExample {
    public static void main(String[] args) {
        // Declare an array of integers
        int[] numbers = new int[5];

        // Assign values to the array elements
        numbers[0] = 10;
        numbers[1] = 20;
        numbers[2] = 30;
        numbers[3] = 40;
        numbers[4] = 50;

        // Access and print array elements
        System.out.println("Array elements:");
        System.out.println("numbers[0]: " + numbers[0]);
        System.out.println("numbers[1]: " + numbers[1]);
        System.out.println("numbers[2]: " + numbers[2]);
        System.out.println("numbers[3]: " + numbers[3]);
        System.out.println("numbers[4]: " + numbers[4]);

        // Calculate and print the sum of array elements
        int sum = 0;
        for (int i = 0; i < numbers.length; i++) {
            sum += numbers[i];
        }
        System.out.println("Sum of array elements: " + sum);
    }
}


This program declares a single-dimensional array called numbers and initializes it with five elements. It then accesses and prints the values of each element. Finally, it calculates and prints the sum of all the elements in the array.

Note that in Java, array indices start from 0, so the first element is accessed using numbers[0], the second element using numbers[1], and so on. The length property of the array is used to determine the size of the array.

for (int i = 0; i < numbers.length; i++) {
    sum += numbers[i];
}

Here's how the iteration works:

Initialization: int i = 0: The variable i is initialized with the value 0. This sets the starting point for the iteration.

Condition: i < numbers.length: The condition is checked before each iteration. As long as i is less than the length of the array numbers, the loop will continue executing. The numbers.length expression gives the total number of elements in the array.

Body: sum += numbers[i]: This statement adds the value of numbers[i] to the sum variable. The numbers[i] expression accesses the element at index i in the array. In each iteration, the value of i increases, allowing us to access different elements of the array.

Increment: i++: After each iteration, the variable i is incremented by 1. This ensures that the loop progresses through each element of the array until the condition i < numbers.length becomes false.

Once the loop finishes executing, the sum of all the elements in the array is stored in the sum variable. Finally, the program prints the calculated sum using System.out.println("Sum of array elements: " + sum);.

The for loop is a convenient way to iterate over the elements of an array sequentially, accessing each element using its corresponding index. It allows you to perform operations on each element or aggregate values, as demonstrated in this example.

