public class SingleDArrayExample2 {
    public static void main(String[] args) {
        // Declare and initialize an array of integers
        int[] numbers = { 10, 5, 20, 15, 30 };

        // Find the maximum value in the array
        int max = numbers[0]; // Assume the first element is the maximum

        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] > max) {
                max = numbers[i];
            }
        }

        // Print the maximum value
        System.out.println("Maximum value: " + max);
    }
}



In this program, we have an array called numbers that is initialized with some integer values. The goal is to find the maximum value among these numbers.

The max variable is initially set to the first element of the array (numbers[0]). Then, a for loop is used to iterate over the remaining elements of the array, starting from index 1.

Within the loop, each element of the array is compared to the current maximum value (max). If an element is found to be greater than the current maximum, it becomes the new maximum value.

Finally, after the loop finishes executing, the program prints the maximum value using System.out.println("Maximum value: " + max);.

By iterating over the array and keeping track of the maximum value, this program efficiently finds and prints the maximum value from the given array.


for (int i = 1; i < numbers.length; i++) {
    if (numbers[i] > max) {
        max = numbers[i];
    }
}


Here's how the iteration works in this context:

Initialization: int i = 1: The variable i is initialized with the value 1. This sets the starting point for the iteration at the second element of the array.

Condition: i < numbers.length: The condition is checked before each iteration. As long as i is less than the length of the array numbers, the loop will continue executing. The numbers.length expression gives the total number of elements in the array.

Body: if (numbers[i] > max) { max = numbers[i]; }: This statement checks if the element at index i in the array (numbers[i]) is greater than the current maximum value (max). If it is, the maximum value is updated to be the value of numbers[i].

The if statement compares numbers[i] with max using the > operator.
If numbers[i] is greater than max, the code inside the if block is executed.
The value of numbers[i] is assigned to max, updating the maximum value.
Increment: i++: After each iteration, the variable i is incremented by 1. This ensures that the loop progresses through each element of the array until the condition i < numbers.length becomes false.

The purpose of this iteration is to compare each element of the array (starting from the second element) with the current maximum value. If a larger element is found, it becomes the new maximum. This process is repeated until all elements of the array have been examined.

Once the loop finishes executing, the maximum value in the array is stored in the max variable. Finally, the program prints the maximum value using System.out.println("Maximum value: " + max);.

By iterating over the array and comparing elements, this program efficiently finds the maximum value and displays it.
